version: "3.7"
networks:
    laravel:

services:
    nginx:
        image: nginx: 1.17.4-alpine
        container_name: nginx
        ports: 
            - "8088:80"
        volumes: 
            - ./src:/var/www/html
            - ./nginx/default/conf:/etc/nginx/conf.d/default.conf
        depends_on: 
            - php
            - postgres
        networks: 
            - laravel

    postgres:
        image: postgres:12.0-alpine
        container_name: postgres
        restart: unless-stopped
        tty: true
        ports: 
            - 5432:5432
        volumes:
        - ./db/data:/var/lib/postgresql/data
        - ./db/sql:/docker-entrypoint-initdb.d
        environment:
            TZ: 'Asia/Tokyo'
            POSTGRES_USER: 'docker'
            POSTGRES_PASSWORD: 'docker'
            POSTGRES_DB: 'docker'
        networks: 
            - laravel

    php:
        build:
            context: .
            dockerfile: Dockerfile
            
        restart: unless-stopped
        tty: true
        container_name: php
        volumes: 
            - ./src:/var/www/html 

        networks: 
            - laravel







  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints:
          - "node.role==manager"

  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - "5000:80"
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - "5001:80"
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - "node.role==manager"

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints:
          - "node.role==manager"

networks:
  frontend:
  backend:

volumes:
  db-data:
